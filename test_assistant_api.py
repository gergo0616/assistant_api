"""
Test script to verify the Azure OpenAI API key is working correctly with the assistant.
"""
import logging
import sys
import json
import requests
import uuid
from datetime import datetime

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Azure OpenAI configuration
AZURE_ENDPOINT = "https://andras018923456332.services.ai.azure.com/"
AZURE_API_KEY = "FCU89qWazU9ZkYGmtC3g41e1EKNFsbtkiOULeWahSW4lQ84xsbP1JQQJ99BBACYeBjFXJ3w3AAAAACOGlZgA"
AZURE_API_VERSION = "2024-08-01-preview"
AZURE_DEPLOYMENT = "DeepSeek-R1"

class EmailContent:
    """Email content data structure."""
    def __init__(self, from_email, subject, body):
        self.from_email = from_email
        self.subject = subject
        self.body = body

class AssistantResponse:
    """Assistant response data structure."""
    def __init__(self, status, response=None, error=None):
        self.status = status
        self.response = response
        self.error = error
        self.request_id = str(uuid.uuid4())
        self.timestamp = datetime.now().isoformat()
    
    def to_dict(self):
        """Convert to dictionary for JSON serialization."""
        result = {
            "status": self.status,
            "request_id": self.request_id,
            "timestamp": self.timestamp
        }
        
        if self.response:
            result["response"] = self.response
        if self.error:
            result["error"] = self.error
            
        return result

def process_email(email):
    """
    Process an email and generate a response using Azure OpenAI.
    
    Args:
        email: Email content to process
        
    Returns:
        AssistantResponse with the generated response or error
    """
    try:
        # Format messages for Azure OpenAI API
        formatted_messages = [
            {
                "role": "system",
                "content": (
                    "You are an email assistant that helps users by providing helpful, "
                    "accurate, and concise responses to their inquiries. Be professional "
                    "and courteous in your replies. Keep responses under 500 words."
                )
            },
            {
                "role": "user",
                "content": (
                    f"Email from: {email.from_email}\n"
                    f"Subject: {email.subject}\n\n"
                    f"{email.body}"
                )
            }
        ]
        
        # Prepare request to Azure OpenAI
        request_url = (
            f"{AZURE_ENDPOINT}openai/deployments/{AZURE_DEPLOYMENT}"
            f"/chat/completions?api-version={AZURE_API_VERSION}"
        )
        
        # Use the correct header format for Azure OpenAI API
        headers = {
            "Content-Type": "application/json",
            "api-key": AZURE_API_KEY
        }
        
        payload = {
            "messages": formatted_messages,
            "model": AZURE_DEPLOYMENT,
            "temperature": 0.1,
            "max_tokens": 1000,
            "top_p": 0.9,
            "frequency_penalty": 0,
            "presence_penalty": 0,
            "user": str(uuid.uuid4())
        }
        
        # Log request details for debugging (excluding API key)
        logger.info(f"Sending request to: {request_url}")
        
        # Make request to Azure OpenAI
        response = requests.post(
            request_url,
            headers=headers,
            json=payload,
            timeout=30
        )
        
        # Check if the request was successful
        if response.status_code != 200:
            logger.error(f"API request failed: {response.status_code} {response.reason}")
            logger.error(f"Response: {response.text}")
            return AssistantResponse(
                status="error",
                error=f"API request failed: {response.status_code} {response.reason}"
            )
        
        # Parse response
        response_data = response.json()
        
        # Extract assistant's message
        if "choices" in response_data and len(response_data["choices"]) > 0:
            assistant_message = response_data["choices"][0]["message"]["content"]
            return AssistantResponse(status="success", response=assistant_message)
        else:
            logger.error("No response choices found in API response")
            return AssistantResponse(
                status="error",
                error="No response generated by the model"
            )
            
    except requests.exceptions.RequestException as e:
        logger.error(f"Error calling Azure OpenAI API: {str(e)}")
        return AssistantResponse(
            status="error",
            error=f"API request failed: {str(e)}"
        )
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        return AssistantResponse(
            status="error",
            error=f"Unexpected error: {str(e)}"
        )

def test_assistant_api():
    """Test the Azure OpenAI API with a specific use case."""
    # Display current configuration
    logger.info("Current Azure OpenAI Configuration:")
    logger.info(f"Endpoint: {AZURE_ENDPOINT}")
    logger.info(f"API Key: {'*' * 5 + AZURE_API_KEY[-4:] if len(AZURE_API_KEY) > 9 else 'Not set properly'}")
    logger.info(f"API Version: {AZURE_API_VERSION}")
    logger.info(f"Deployment: {AZURE_DEPLOYMENT}")
    
    # Create a test email
    test_email = EmailContent(
        from_email="test@example.com",
        subject="Project Status Update",
        body="Hello,\n\nCould you please provide an update on the current status of the PowerAutomate integration project? We need to know if there are any blockers or issues that need to be addressed.\n\nThanks,\nTest User"
    )
    
    # Process the email
    logger.info("Processing test email...")
    response = process_email(test_email)
    
    # Check if response was successful
    if response.status == "success" and response.response:
        logger.info("API key is working correctly!")
        logger.info(f"Response: {response.response}")
        return True
    else:
        logger.error(f"API request failed: {response.error}")
        return False

if __name__ == "__main__":
    success = test_assistant_api()
    sys.exit(0 if success else 1)
