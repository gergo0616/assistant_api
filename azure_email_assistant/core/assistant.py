"""
Azure OpenAI assistant implementation for email processing.
"""
import uuid
import logging
from abc import ABC, abstractmethod
from dataclasses import dataclass
from datetime import datetime
from typing import Dict, Any, Optional

import requests

from azure_email_assistant.core.config import azure_config


# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


@dataclass
class EmailContent:
    """Email content data structure."""
    from_email: str
    subject: str
    body: str


@dataclass
class AssistantResponse:
    """Assistant response data structure."""
    status: str
    response: Optional[str] = None
    error: Optional[str] = None
    request_id: str = ""
    timestamp: str = ""
    
    def __post_init__(self):
        """Initialize default values if not provided."""
        if not self.request_id:
            self.request_id = str(uuid.uuid4())
        if not self.timestamp:
            self.timestamp = datetime.now().isoformat()
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for JSON serialization."""
        result = {
            "status": self.status,
            "request_id": self.request_id,
            "timestamp": self.timestamp
        }
        
        if self.response:
            result["response"] = self.response
        if self.error:
            result["error"] = self.error
            
        return result


class BaseAssistant(ABC):
    """Base assistant interface."""
    
    @abstractmethod
    def process_email(self, email: EmailContent) -> AssistantResponse:
        """Process an email and generate a response."""
        pass


class AzureAssistant(BaseAssistant):
    """Azure OpenAI assistant implementation."""
    
    def __init__(self, config=azure_config):
        """Initialize with configuration."""
        self.config = config
    
    def process_email(self, email: EmailContent) -> AssistantResponse:
        """
        Process an email and generate a response using Azure OpenAI.
        
        Args:
            email: Email content to process
            
        Returns:
            AssistantResponse with the generated response or error
        """
        try:
            # Format messages for Azure OpenAI API
            formatted_messages = self._format_messages(email)
            
            # Prepare request to Azure OpenAI
            request_url = (
                f"{self.config.endpoint}openai/deployments/{self.config.deployment}"
                f"/chat/completions?api-version={self.config.api_version}"
            )
            
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {self.config.api_key}"
            }
            
            payload = {
                "messages": formatted_messages,
                "model": self.config.deployment,
                "temperature": self.config.temperature,
                "max_tokens": self.config.max_tokens,
                "top_p": self.config.top_p,
                "frequency_penalty": self.config.frequency_penalty,
                "presence_penalty": self.config.presence_penalty,
                "user": str(uuid.uuid4())
            }
            
            # Make request to Azure OpenAI
            response = requests.post(
                request_url,
                headers=headers,
                json=payload,
                timeout=30
            )
            
            # Check if the request was successful
            response.raise_for_status()
            
            # Parse response
            response_data = response.json()
            
            # Extract assistant's message
            if "choices" in response_data and len(response_data["choices"]) > 0:
                assistant_message = response_data["choices"][0]["message"]["content"]
                return AssistantResponse(status="success", response=assistant_message)
            else:
                logger.error("No response choices found in API response")
                return AssistantResponse(
                    status="error",
                    error="No response generated by the model"
                )
                
        except requests.exceptions.RequestException as e:
            logger.error(f"Error calling Azure OpenAI API: {str(e)}")
            return AssistantResponse(
                status="error",
                error=f"API request failed: {str(e)}"
            )
        except Exception as e:
            logger.error(f"Unexpected error: {str(e)}")
            return AssistantResponse(
                status="error",
                error=f"Unexpected error: {str(e)}"
            )
    
    def _format_messages(self, email: EmailContent) -> list:
        """Format email content into messages for the API."""
        return [
            {
                "role": "system",
                "content": (
                    "You are an email assistant that helps users by providing helpful, "
                    "accurate, and concise responses to their inquiries. Be professional "
                    "and courteous in your replies. Keep responses under 500 words."
                )
            },
            {
                "role": "user",
                "content": (
                    f"Email from: {email.from_email}\n"
                    f"Subject: {email.subject}\n\n"
                    f"{email.body}"
                )
            }
        ]


class MockAssistant(BaseAssistant):
    """Mock assistant for testing without API calls."""
    
    def process_email(self, email: EmailContent) -> AssistantResponse:
        """
        Process an email and return a mock response.
        
        Args:
            email: Email content to process
            
        Returns:
            AssistantResponse with a mock response
        """
        # Generate a mock response based on the email content
        response = f"Thank you for your email regarding '{email.subject}'.\n\n"
        
        if "help" in email.body.lower():
            response += "I'd be happy to help you with your request. Please provide more details about what you need assistance with."
        elif "information" in email.body.lower():
            response += "Here is the information you requested. Please let me know if you need anything else."
        elif "question" in email.body.lower():
            response += "In response to your question, I can provide the following answer. Feel free to ask if you need clarification."
        else:
            response += "I've received your message and will process it accordingly. If you have any specific questions, please let me know."
        
        response += "\n\nBest regards,\nAI Assistant"
        
        return AssistantResponse(status="success", response=response)
